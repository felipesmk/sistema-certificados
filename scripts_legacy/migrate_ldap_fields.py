#!/usr/bin/env python3
"""
Script de migra√ß√£o para adicionar campos LDAP aos modelos existentes.
Execute ap√≥s ativar o ambiente virtual.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import User, Role
from sqlalchemy import text

def migrate_ldap_fields():
    """Adiciona novos campos LDAP ao banco de dados."""
    print("üîÑ Iniciando migra√ß√£o dos campos LDAP...")
    
    with app.app_context():
        try:
            # Verificar se as colunas j√° existem
            inspector = db.inspect(db.engine)
            
            # Verificar campos na tabela User
            user_columns = [col['name'] for col in inspector.get_columns('user')]
            if 'last_ldap_sync' not in user_columns:
                print("‚ûï Adicionando campo 'last_ldap_sync' √† tabela User...")
                db.engine.execute(text("ALTER TABLE user ADD COLUMN last_ldap_sync DATETIME"))
            else:
                print("‚úÖ Campo 'last_ldap_sync' j√° existe na tabela User")
            
            # Verificar campos na tabela Role
            role_columns = [col['name'] for col in inspector.get_columns('role')]
            if 'is_ldap_role' not in role_columns:
                print("‚ûï Adicionando campo 'is_ldap_role' √† tabela Role...")
                db.engine.execute(text("ALTER TABLE role ADD COLUMN is_ldap_role BOOLEAN DEFAULT 0"))
                # Criar √≠ndice
                db.engine.execute(text("CREATE INDEX IF NOT EXISTS ix_role_is_ldap_role ON role (is_ldap_role)"))
            else:
                print("‚úÖ Campo 'is_ldap_role' j√° existe na tabela Role")
            
            print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
            print("\nüìã Pr√≥ximos passos:")
            print("1. Configure as vari√°veis LDAP no arquivo .env")
            print("2. Mapeie os grupos LDAP editando LDAP_ROLE_MAPPING em routes/auth.py") 
            print("3. Teste a conex√£o LDAP na p√°gina de configura√ß√µes")
            
        except Exception as e:
            print(f"‚ùå Erro durante a migra√ß√£o: {e}")
            print("üí° Caso o erro persista, voc√™ pode recriar o banco:")
            print("   1. Exclua o arquivo instance/certificados.db")
            print("   2. Execute: python init_db.py")
            return False
            
    return True

if __name__ == "__main__":
    success = migrate_ldap_fields()
    sys.exit(0 if success else 1)