# Sistema de Certificados - Regras do Cursor
# ===========================================

## üìã **Vis√£o Geral do Projeto**
Este √© um sistema de gest√£o de certificados e documentos controlados desenvolvido em Flask com PostgreSQL. O sistema implementa RBAC (Role-Based Access Control) completo com dashboards interativos e notifica√ß√µes autom√°ticas.

## üèóÔ∏è **Arquitetura do Sistema**

### **Estrutura Principal**
- `app.py` - Aplica√ß√£o Flask consolidada (2611 linhas)
- `models.py` - Modelos SQLAlchemy (User, Role, Permission, Registro, Responsavel)
- `routes/` - Blueprints de rotas organizadas
- `templates/` - Templates HTML com Bootstrap 5
- `utils/` - Utilit√°rios (cache, pagina√ß√£o, valida√ß√£o)
- `docker-compose.yml` - PostgreSQL via Docker

### **Banco de Dados**
- **PostgreSQL** via Docker
- **URL**: `postgresql://certificados_user:certificados123@localhost:5432/certificados_db`
- **Migra√ß√£o**: De SQLite para PostgreSQL
- **Constraints**: Campos √∫nicos (email) com valida√ß√£o dupla (cliente/servidor)

## üîê **Sistema de Permiss√µes (RBAC)**

### **Modelos Principais**
- `User` - Usu√°rios do sistema
- `Role` - Perfis de acesso com hierarquia
- `Permission` - Permiss√µes granulares
- `RolePermission` - Associa√ß√£o N:N

### **Permiss√µes Padr√£o**
- `manage_access` - Gerenciar usu√°rios e perfis
- `manage_registros` - Gerenciar registros de certificados
- `manage_responsaveis` - Gerenciar respons√°veis
- `manage_config` - Gerenciar configura√ß√µes
- `send_alerts` - Enviar alertas por email
- `view_data` - Visualizar dados

### **Bypass do Admin**
O usu√°rio `admin` deve ter bypass autom√°tico em todas as permiss√µes:
```python
if hasattr(current_user, 'role') and current_user.role and current_user.role.nome == 'admin':
    return f(*args, **kwargs)
```

## üé® **Frontend e UI**

### **Tecnologias**
- **Bootstrap 5** - Framework CSS
- **Chart.js** - Gr√°ficos interativos
- **Bootstrap Icons** - √çcones
- **Modo escuro/claro** - Toggle de tema
- **JavaScript** - Valida√ß√£o client-side em tempo real

### **Templates**
- `base.html` - Template base com navega√ß√£o
- Dashboards espec√≠ficos por funcionalidade
- Formul√°rios CRUD organizados com valida√ß√£o
- Templates de email HTML

## üöÄ **Execu√ß√£o e Deploy**

### **Desenvolvimento**
```bash
# Ativar ambiente virtual
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
.\venv\Scripts\Activate.ps1

# Subir PostgreSQL
docker-compose up -d postgres

# Executar aplica√ß√£o
python run_production.py
```

### **Produ√ß√£o**
- **Windows**: Waitress
- **Linux/Mac**: Gunicorn
- **Porta**: 80 (HTTP padr√£o)

## üìß **Sistema de Notifica√ß√µes**

### **Configura√ß√£o**
- **SMTP**: Gmail, Outlook, Office 365, Exchange
- **Agendamento**: APScheduler com configura√ß√£o flex√≠vel
- **Templates**: HTML personalizados
- **Teste**: Valida√ß√£o em tempo real

## üîß **Padr√µes de C√≥digo**

### **Python**
- **Flask 2.2+** com blueprints
- **SQLAlchemy** para ORM
- **Flask-Login** para autentica√ß√£o
- **Flask-Principal** para RBAC
- **APScheduler** para agendamentos
- **Valida√ß√£o Dupla** - Server-side + Client-side

### **Estrutura de Rotas**
```python
@app.route('/rota')
@permission_required('permissao')
@login_required
def funcao():
    # Valida√ß√£o server-side
    if request.method == 'POST':
        # Validar dados antes de salvar
        from utils.validation import validate_email, check_email_exists
        # L√≥gica de valida√ß√£o
    # L√≥gica da rota
    return render_template('template.html')
```

### **Modelos**
```python
class Modelo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    # Campos do modelo
    # Relacionamentos
    # M√©todos auxiliares
```

## üõ†Ô∏è **Scripts e Utilit√°rios**

### **Scripts Principais**
- `run_production.py` - Execu√ß√£o em produ√ß√£o
- `manage_db.py` - Gerenciamento do banco
- `quick_setup.py` - Setup r√°pido
- `configure_postgresql.py` - Configura√ß√£o segura do PostgreSQL
- `test_validation.py` - Testes de valida√ß√£o

### **Utilit√°rios de Valida√ß√£o**
- `utils/validation.py` - Fun√ß√µes de valida√ß√£o centralizadas
  - `validate_email()` - Valida√ß√£o de formato de email
  - `check_email_exists()` - Verifica√ß√£o de email √∫nico no banco
  - `validate_name()` - Valida√ß√£o de nomes
  - `validate_username()` - Valida√ß√£o de usernames
  - `validate_password()` - Valida√ß√£o de senhas
  - `validate_phone()` - Valida√ß√£o de telefones

### **Docker**
- PostgreSQL via `docker-compose.yml`
- Configura√ß√£o simplificada
- Volumes persistentes

## üìä **Funcionalidades Principais**

### **Gest√£o de Registros**
- CRUD completo de certificados
- Controle de vencimentos
- Filtros e ordena√ß√£o
- Status de regulariza√ß√£o

### **Dashboards**
- Dashboard principal com gr√°ficos
- Dashboard de vencimentos
- Dashboard de respons√°veis
- Dashboard de atividade

### **Gest√£o de Usu√°rios**
- CRUD de usu√°rios
- Perfis personaliz√°veis
- Hist√≥rico de atividades
- Importa√ß√£o/exporta√ß√£o

## üîç **Debugging e Logs**

### **Logging**
- Rota√ß√£o de arquivos (1MB, 10 backups)
- N√≠veis configur√°veis
- Contexto detalhado

### **Cache**
- Cache em mem√≥ria para configura√ß√µes
- TTL configur√°vel
- Invalida√ß√£o autom√°tica

## ‚ö†Ô∏è **Pontos de Aten√ß√£o**

### **Permiss√µes**
- Sempre verificar se o admin tem bypass
- Usar decorator `@permission_required`
- Verificar permiss√µes nos templates

### **Banco de Dados**
- PostgreSQL obrigat√≥rio (n√£o mais SQLite)
- Configura√ß√£o via vari√°veis de ambiente
- Backup autom√°tico recomendado
- **Constraints √∫nicos**: Sempre validar antes de inserir/atualizar

### **Email**
- Configura√ß√£o SMTP obrigat√≥ria
- Teste de conectividade
- Templates HTML responsivos

### **Valida√ß√£o de Dados**
- **Sempre implementar valida√ß√£o server-side** antes de salvar no banco
- **Usar valida√ß√£o client-side** para melhor UX
- **Tratar erros de constraint** com mensagens amig√°veis
- **Centralizar valida√ß√µes** em `utils/validation.py`

## üéØ **Boas Pr√°ticas**

1. **Sempre ativar ambiente virtual** antes de executar
2. **Verificar permiss√µes** antes de implementar novas rotas
3. **Usar blueprints** para organizar rotas
4. **Implementar logging** para opera√ß√µes cr√≠ticas
5. **Testar emails** antes de produ√ß√£o
6. **Manter backup** do banco de dados
7. **Documentar mudan√ßas** no CHANGELOG.md
8. **Validar dados** antes de salvar no banco
9. **Usar fun√ß√µes centralizadas** para valida√ß√µes
10. **Testar valida√ß√µes** com `test_validation.py`

## üîÑ **Fluxo de Desenvolvimento**

1. Ativar ambiente virtual
2. Subir PostgreSQL via Docker
3. Implementar funcionalidade
4. **Implementar valida√ß√µes** (server-side + client-side)
5. Testar permiss√µes
6. Verificar templates
7. Testar valida√ß√µes com `test_validation.py`
8. Testar email (se aplic√°vel)
9. Commit e push

## üìù **Comandos √öteis**

```bash
# Ambiente
python -m venv venv
.\venv\Scripts\Activate.ps1
pip install -r requirements.txt

# Banco
docker-compose up -d postgres
python manage_db.py init

# Aplica√ß√£o
python run_production.py

# Testes
python test_validation.py

# Git
git status
git add .
git commit -m "descri√ß√£o"
git push
```
